#include<stdio.h>
#include <stdlib.h>
#include<limits.h>

struct Process
{
    int pid;
	int at;
	int bt;
	int ct;
	int tat;
	int wt;
	int rt;
	int st;
};
int n;
int q[100]; // queue
int front = -1, rear = -1;
int enqueue(int i)
{
    if (rear == 100)
    {
        printf("overflow");
        return 0;
    }
    rear++;
    q[rear] = i;
    if (front == -1)
        front = 0;
}

int dequeue()
{
    if (front == -1)
    {
        printf("underflow");
        return 0;
    }
    int temp = q[front];
    if (front == rear)
        front = rear = -1;
    else
        front++;
    return temp;
}
int isInQueue(int i)
{
    int k;
    for (k = front; k <= rear; k++)
    {
        if (q[k] == i)
            return 1;
    }
    return 0;
}
int compare (const void *p1, const void *p2)
{

    int a=((struct Process *)p1)->at;
    int b=((struct Process *)p2)->at;

  	if (a<b)
      	return -1;
   	else
      	return 1;
  	
}

int main()
{
    int i, j, time = 0, sum_bt = 0, tq;
    //char c;
    float avgwt = 0, avgtat = 0, avgrt = 0;
    printf("\n Name:Bhavya Shastri\n Student ID:200121266\n Section:B\n");
    printf("Enter no of processes:");
    scanf("%d", &n);
    struct Process p[n];
    int rem[n],comp[n];
    for (i = 0; i < n; i++)
    {
        p[i].pid = i+1;
        printf("\nEnter the arrival time and burst time of process %d: ", p[i].pid);
        scanf("%d%d", &p[i].at, &p[i].bt);
        rem[i] = p[i].bt;
        comp[i] = 0;
        sum_bt += p[i].bt;
    }

    printf("\nEnter the time quantum:");
    scanf("%d", &tq);

    qsort ((void *)p, n, sizeof(struct Process), compare); 
    enqueue(0); // enqueue the first process
    for (time = p[0].at; time < sum_bt;) // run until the total burst time reached
    {
        i = dequeue();

        if (rem[i]<= tq)
        { // for processes having remaining time with less than or equal time quantum
            if(rem[i]==p[i].bt)
                p[i].st=time;
            time += rem[i];
            rem[i] = 0;
            comp[i]= 1;
            p[i].ct=time;
            p[i].tat = p[i].ct - p[i].at;
            p[i].wt = p[i].tat - p[i].bt;
            p[i].rt=p[i].st-p[i].at;
            
            for (j = 0; j < n; j++) // enqueue the processes which have come while scheduling
            {
                if (p[j].at <= time && comp[j] != 1 && isInQueue(j) != 1)
                {
                    enqueue(j);
                }
            }
        }
        else // more than time quantum
        {
            if(rem[i]==p[i].bt)
                p[i].st=time;
            time += tq;
            rem[i] -= tq;
            for (j = 0; j < n; j++) // enqueue the processes which have come scheduling first
            {
                if (p[j].at <= time && comp[j]!= 1 && i != j && isInQueue(j) != 1)
                {
                    enqueue(j);
                }
            }
            enqueue(i); // then enqueue the uncompleted process
        }
    }

    printf("\nName\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnAround Time\t Response Time\n");
    for (i = 0; i < n; i++)
    {
        avgtat += p[i].tat;
        avgwt += p[i].wt;
        avgrt += p[i].rt;
        printf("\nP%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d", p[i].pid, p[i].at, p[i].bt,p[i].ct, p[i].wt, p[i].tat, p[i].rt);
    }
    printf("\nAverage TAT:%f\n", avgtat / n);
    printf("\nAverage Waiting time:%f\n", avgwt / n);
    printf("\nAverage Response time:%f\n", avgrt / n);

    return 0;
}
